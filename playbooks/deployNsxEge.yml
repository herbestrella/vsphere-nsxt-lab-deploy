---
- name: NSX-T Edge deployment
  hosts: localhost
  gather_facts: false
  vars_files:
    - ../answerfile.yml
  tasks:
    - name: Deploy NSX-T Edge node from OVA
      vmware_deploy_ovf:
        hostname: "{{ vcenter.fqdn }}"
        username: "{{ vcenter.user }}"
        password: "{{ vcenter.password }}"
        datacenter: "{{ vcenter.datacenter }}"
        cluster: "{{ nsxedge_vsphere_cluster }}"
        datastore: "{{ nfs_datastore }}"
        name: "{{ item.value.vmname }}"
        ovf: "{{ NsxEdgeOva }}"
        deployment_option: "{{ nsxedgesize }}"
        networks:
          "Network 0": "{{ nsxedgemgmtportgroup }}"
          "Network 1": "{{ nsxedgeupl1portgroup }}"
          "Network 2": "{{ nsxedgeupl2portgroup }}"
          "Network 3": "{{ nsxedgeupl2portgroup }}"
        disk_provisioning: thin
        power_on: yes
        validate_certs: no
        fail_on_spec_warnings: yes
        wait: yes
        wait_for_ip_address: yes
        inject_ovf_env: yes
        properties:
          nsx_allowSSHRootLogin: yes
          nsx_cli_audit_passwd_0: "{{ nsxedgepassword }}"
          nsx_cli_audit_username: "{{ nsxedgeaudituser }}"
          nsx_cli_passwd_0: "{{ nsxedgepassword }}"
          nsx_cli_username: "{{ nsxedgeadminuser }}"
          nsx_dns1_0: "{{ nsxedgedns }}"
          nsx_domain_0: "{{ nsxedgedomain }}"
          nsx_gateway_0: "{{ nsxedgegateway }}"
          nsx_hostname: "{{ item.value.hostname }}"
          nsx_ip_0: "{{ item.value.ip }}"
          nsx_isSSHEnabled: True
          nsx_netmask_0: "{{ nsxedgemask }}"
          nsx_ntp_0: "{{ nsxedgentp }}"
          nsx_passwd_0: "{{ nsxedgepassword }}"
      delegate_to: localhost
      with_dict: "{{ nsxedge }}"
      async: 7200
      poll: 0
      register: deployment
    - name: Wait 3 seconds before start checking wheter the node is ready
      pause: seconds=3
    - name: Result check for deployment
      async_status:
        jid: "{{ item.ansible_job_id }}"
      register: job_result
      with_items: "{{ deployment.results }}"
    - name: Create a mark if there is a new node to deploy
      file: path=/tmp/newNsxNode state=touch owner=root group=root mode=0555
      when: item.stat is not defined
      with_items: "{{ job_result.results }}"
    - stat: path=/tmp/newNsxNode
      register: newNsxNode
    - name: Wait 15 minutes before checking whether the node is ready
      pause: minutes=15
      when: newNsxNode.stat.exists == True
    - name: Delete the temporary mark
      file: path=/tmp/newNsxNode state=absent
    - name: Result check for deployment
      async_status:
        jid: "{{ item.ansible_job_id }}"
      register: job_result
      until: job_result.finished
      with_items: "{{ deployment.results }}"
      retries: 20
  tags: NsxNode